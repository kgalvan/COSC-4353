Assign2: Due 11:59PM March 9

Create a guessing game for a single user to play. The game will read a file which has a list of words. For example, the file may contain:

monkey
fruit
banana
apple
cosmopolitan

The program will pick a random word from the file, scramble it (for example, monkey may be scrambled to oekmny, emknoy, etc.), and present to the user the scrambled word.

Then it will ask the user to guess. The user gets partial points for their guess. They get one point for each vowel and two points for each consonant. For example, if the user enters monk (when the selected word is monkey), then they get 7 points. If a letter they enter is not in the word, they don't get any points (they get 0). For example, if they enter mop, they get 0 points. If the spelling of the word is wrong, they get zero points. For example, if they enter ney, even though each letter there is in the selected word, they get 0 points.

The service at the location http://agile.cs.uh.edu:8084 may be used for checking spelling. For example, 

http://agile.cs.uh.edu/spell?check=right will return true
http://agile.cs.uh.edu/spell?check=rihgt will return false

The program will present the user with a scrambled word, cycle through asking the user for a guess, print their score, and repeat. It will stop when the user has made the perfect guess, that is, entered the original word (monkey, for example).

Please bring forward the practices, techniques, and tools you have learned so far. This includes: 
Good code quality
Lightweight design
Minimum code
Automated testing                                                         
Code coverage
Build files (I created them for you in assign1, but it's your turn now)
Change build.bat in your repository to point to assign2 instead of assign1

Total [100]: 84
Program runs as expected [20]: -5
No build task to run the UI.

All tests pass [20]:

Test quality [20]: -3
SpellCheckerTest This should not be dealing with GuessingGame

GuessingGameTest: This should not be dealing with SpellCheckerService

Code coverage [10]:

Code quality [10]: -3
UI: Need a better name for this class.

Avoid null initializations like this:
Response response = null;
String websiteResponse = null;
     
Avoid code like this. Proactively seek concise code.
List<String> VOWELS = new ArrayList<String>();
VOWELS.add("a");
VOWELS.add("e");
VOWELS.add("i");
VOWELS.add("o");
VOWELS.add("u");


Design quality [20]: -5
getResponseFromURL: too much code here

scramble: poor quality code here, need to make this concise and use methods in the JDK.

pickAWord: same