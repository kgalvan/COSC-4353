package fibonacci;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertAll;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

public class FibonacciRecursiveSolutionTest {
    private FibonacciRecursiveSolution fibonacciRecursiveSolution;

    @BeforeEach
    void init(){
        fibonacciRecursiveSolution = new FibonacciRecursiveSolution();
    }

    @Test
    void canaryTest() {
        assertTrue(true);
    }

    @Test
    void fibRecursiveMultipleNumbers() { 
      //Venkat: We saw these exact tests in the other test class. 
      //Let's keep it DRY and avoid duplication of tests, they are code too.
      
        assertAll(
                () -> assertEquals("1", String.valueOf(fibonacciRecursiveSolution.compute(0))),
                () -> assertEquals("1", String.valueOf(fibonacciRecursiveSolution.compute(1))),
                () -> assertEquals("2", String.valueOf(fibonacciRecursiveSolution.compute(2))),
                () -> assertEquals("3", String.valueOf(fibonacciRecursiveSolution.compute(3))),
                () -> assertEquals("5", String.valueOf(fibonacciRecursiveSolution.compute(4))),
                () -> assertEquals("8", String.valueOf(fibonacciRecursiveSolution.compute(5))),
                () -> assertEquals("34", String.valueOf(fibonacciRecursiveSolution.compute(8))),
                () -> assertEquals("89", String.valueOf(fibonacciRecursiveSolution.compute(10)))
        );
    }
                   
//Venkat: Let's remove the following as they may be very slow. Do not run them for recursive:
//    @Test // ~0.5 seconds
//    void fibRecursive20(){
//        assertEquals("10946", String.valueOf(fibonacciRecursiveSolution.compute(20)));
//    }
//
//    @Test // ~10.5 seconds
//    void fibRecursive40(){
//        assertEquals("165580141", String.valueOf(fibonacciRecursiveSolution.compute(40)));
//    }
//
//    @Test // ~21.5 minutes
//    void fibRecursive50(){
//        assertEquals("20365011074", String.valueOf(fibonacciRecursiveSolution.compute(50)));
//    }
//
//    /*
//    @Test
//    void simpleRecursionForPosition300(){
//        assertEquals("359579325206583560961765665172189099052367214309267232255589801",
//                String.valueOf(fibonacciRecursiveSolution.compute(300)));
//    }
//*/
}