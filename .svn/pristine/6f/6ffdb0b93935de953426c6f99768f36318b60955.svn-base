/*
Notes : Normally I would never directly call arrays/variables from the main class, I would use get methods,
but you specified only 2 methods. I would also implement a compare method, as well as a method to generate
the number of blacks and gray much easier. This code may have a problem in that black is in the given list of colors
so may not work as intended. The code also have never little error checking for issues such as duplicate colors
in either color array. I also didn't know what you wanted, right now so i did it according to the original
assignment description. I hard coded mastermind.solutions (line 56) so that it would fit the 5 conditions
listed in the review. I tried using parameters, but had to run before i could try it out.
 */
package mastermind;

import java.awt.*;
import java.util.*;
import java.util.List; //for some reason i get an error if i dont specify util list

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
//import org.junit.runner.RunWith;
//import org.junit.runners.Parameterized;

import static org.junit.jupiter.api.Assertions.assertEquals;


public class MasterMindTest {

    MasterMind mastermind;
/*    @RunWith(Parameterized.class)
    public class Solutions
    {
        private Color[] testSolutions;
        public Solutions(Color[] generatedInput)
        {
            testSolutions = generatedInput;
        }
    }
    @Parameterized.Parameters
    public List<Object[]> data()
    {
        List<Object[]> list = new ArrayList<Object[]>();
        list.add(new Color[]{Color.YELLOW,Color.YELLOW,Color.YELLOW,Color.YELLOW,Color.YELLOW,Color.YELLOW}); //none correct
        list.add(new Color[]{Color.YELLOW,Color.RED,Color.YELLOW,Color.YELLOW,Color.YELLOW,Color.YELLOW}); //one correct color, wrong pos
        list.add(new Color[]{Color.RED,Color.YELLOW,Color.YELLOW,Color.YELLOW,Color.YELLOW,Color.YELLOW}); //one correct color, right pos
        list.add(new Color[]{Color.RED,Color.CYAN,Color.YELLOW,Color.YELLOW,Color.YELLOW,Color.YELLOW}); //two correct color, one right pos
        list.add(new Color[]{Color.RED, Color.GREEN, Color.BLACK, Color.WHITE, Color.BLUE, Color.CYAN}); //all correct

        return list;
    }
    */
    @BeforeEach
    void init() {
      List<Color> selection = Arrays.asList(Color.RED, Color.GREEN, Color.BLACK, Color.WHITE, Color.BLUE, Color.CYAN);
      mastermind = new MasterMind(selection);
    }
    @Test //test for none correct
    void guess()
    {
        mastermind.solution = new Color[]{Color.RED, Color.GREEN, Color.BLACK, Color.WHITE, Color.BLUE, Color.CYAN};
        mastermind.guess();
        int blackCounter = 0;
        int grayCounter = 0;
        for(int x = 0; x < 6; x++)
        {
            if (mastermind.output[x] == Color.BLACK)
                blackCounter++;
            if(mastermind.output[x] == Color.GRAY)
                grayCounter++;
        }
        //assertEquals(blackCounter,0); //none correct 
        //assertEquals(grayCounter,0); //mastermind.solution = new Color[]{Color.YELLOW,Color.YELLOW,Color.YELLOW,Color.YELLOW,Color.YELLOW,Color.YELLOW};

        //assertEquals(blackCounter,0); //one correct, wrong pos
        //assertEquals(grayCounter,1); //mastermind.solution = new Color[]{Color.YELLOW,Color.RED,Color.YELLOW,Color.YELLOW,Color.YELLOW,Color.YELLOW};

        //assertEquals(blackCounter,1); //one correct, right pos
        //assertEquals(grayCounter,0); //mastermind.solution = new Color[]{Color.RED,Color.YELLOW,Color.YELLOW,Color.YELLOW,Color.YELLOW,Color.YELLOW}

        //assertEquals(blackCounter,1); //two correct, one right pos
        //assertEquals(grayCounter,1); //mastermind.solution = new Color[]{Color.RED,Color.CYAN,Color.YELLOW,Color.YELLOW,Color.YELLOW,Color.YELLOW});

        assertEquals(blackCounter,6); //all correct 
        assertEquals(grayCounter,0); //mastermind.solution = new Color[]{Color.RED, Color.GREEN, Color.BLACK, Color.WHITE, Color.BLUE, Color.CYAN};
    }

}

