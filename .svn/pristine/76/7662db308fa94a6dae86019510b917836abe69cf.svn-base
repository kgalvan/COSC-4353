package guessinggame;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

public class GuessingGameTest {
    GuessingGame guessingGame; //Venkat: a blank line after this line, please
    private GuessingGame guessingGameMock; //Venkat: please remove
   @BeforeEach
    void init(){
       guessingGame = new GuessingGame(new SpellCheckerService());
       guessingGameMock = Mockito.mock(GuessingGame.class);
       
       //Venkat: SpellChecker spellChecker = mock(SpellChecker.class);
       //when(spellChecker.isSpellingCorrect(anyString())).thenReturn(true);
       //guessingGame = new GuessingGame(spellChecker);
    }

    @Test
    void Canary() {
        assertTrue(true);
    }

    @Test
    void scoreIsZero() {
        assertEquals(0, guessingGame.score("oekmny", ""));
    }

    @Test
    void scoreIsTwoMConsonant() {
        assertEquals(2, guessingGame.score("oekmny", "m"));
    }

    @Test
    void scoreIsOneOVowel() {
        assertEquals(1, guessingGame.score("oekmny", "o"));
    }

    @Test
    void scoreIsTwoTwoConsonantsNotRealWord() {
        assertEquals(0, guessingGame.score("oekmny", "mn"));
    }

    @Test
    void scoreIsTwoTwoVowelsNotRealWord() {
        assertEquals(0, guessingGame.score("oekmny", "oe"));
    }

    @Test
    void scoreIsThreeOneConsonantOneVowel() {
        assertEquals(3, guessingGame.score("oekmny", "mo"));
    }

    @Test
    void scoreIsZeroLetterNotInScrambledWord() {
        assertEquals(0, guessingGame.score("oekmny", "a"));
    }

    @Test
    void scoreIsThreeMeInput() {
        assertEquals(3, guessingGame.score("oekmny", "Me"));
    }

    @Test
    void scoreIsFiveMatInput() {
        assertEquals(0, guessingGame.score("oekmny", "mat"));
    }

    @Test
    void scoreIsZeroMoonInput() {
        assertEquals(0, guessingGame.score("oekmny", "moon"));
    }
    
    //Venkat: 
    /*                       
    test for incorrect spelling
    
    SpellChecker spellChecker = mock(SpellChecker.class);
    when(spellChecker.isSpellingCorrect("whatever")).thenReturn(false);
    guessingGame = new GuessingGame(spellChecker);
    assertEquals(0, guessingGame.score("whatever", "whatever"));

    test for network failure
    
    SpellChecker spellChecker = mock(SpellChecker.class);           
    String message = "network failure";
    when(spellChecker.isSpellingCorrect("whatever")).thenThrows(message);
    guessingGame = new GuessingGame(spellChecker);
    assertThrows(RuntimeException.class, guessingGame.score("whatever", "whatever"), message);    
    */
}


