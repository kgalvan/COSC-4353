[Venkat 02/21/18 06:29 AM EST]
synopsis: coverage report shows red 

details:                           

Please take note of red in coverage report. When you see red in coverage, either fix by 
1. removing code
2. writing test
3. ask me for help.

<https://groups.google.com/d/msg/uhcss18sd/1QKkliwsSM4/0QTwFakTAAAJ>

------------------------------------------------------------------------------
[Venkat 02/20/18 04:47 AM MST]
synopsis: good work so far 

details:
Please take note of red in coverage report. When you see red in coverage, either fix by 
1. removing code
2. writing test
3. ask me for help.

Please see suggestions in code.

Please proceed to implement the GUI. Keep that GUI code in a separate package.
No need to write tests for the GUI. Exclude GUI code from coverage.

------------------------------------------------------------------------------
[Venkat 02/18/18 06:19 AM MST]
synopsis: let's refactor and move forward 

details:                              

Good work so far.

Please do not leave any comments in code. There should be no commented out lines.

Please address and remove the review notes I leave in the code.

Please use assertAll for multiple asserts. Why? In

assertEquals(...);
assertEquals(...);
assertEquals(...);

or assertEquals(first && second && third)

if the first or the second assert fails, rest of the asserts will not run.

In 
assertAll(
  () -> assertEquals(...),
  () -> assertEquals(...),
  () -> assertEquals(...)
);

each of the asserts will run even if anyone of them fails.

Please proceed to write tests for the following:

game status at the start
game status after guess is called twice
game status after guess is called with the correct colors in all positions
game status after guess is called 20 times
game status after guess is called again after correct guess
game status when user guess correct on the 20th try

Let's write a few tests for a method that will return a random color each time we call it. Let's call it generateRandomColors(). Make this a protected method.

After that we want to make sure that when the public no argument constructor (not the protected constructor) is called this generateRandomColors() method is called. To do that, we can write a test like this:

AtomicBoolean called = new AtomicBoolean();
Mastermind stub = new Mastermind() {
  protected ... generateRandomColors() {
    called.set(true);
	}
};

assertTrue(called.get());

------------------------------------------------------------------------------
[Venkat 02/16/18 04:54 AM MST]
synopsis: let's change the design a bit 

details:                               
Good work so far. Let's change the design a bit and write a few more tests.

------------------------------------------------------------------------------
[Venkat 02/15/18 04:49 AM MST]
synopsis: let's change direction 

details:                        
Please delete the tests and code so far.

Let's change direction, we will focus on some interesting behavior instead of state.

Start with a protected constructor that takes a collection of colors. These are the colors we can assume the application has pre-selected for the user. Then let's focus on these tests:

user guesses correctly no color
user guesses one color but not in the right position
user guesses one color in the right position
user guesses two color, one in the right position
user guesses all colors in the right positions 

For these tests, we need only one constructor and one method, let's call it guess.

------------------------------------------------------------------------------
[Venkat 02/13/18 21:00 PM MST]
synopsis: let's follow Java coding standards 

details:

Let's follow Java coding standards:
Class names start with uppercase letter.

Method names start with lowercase letter.

Let's move assign2test to MasterMindTest
Let's move assign2 to MasterMind           

In addition to canary test, write either one or two tests and absolutely minimum code to make those one or two tests to pass. Write as little as possible.

I have setup a gradle build file for you and have integrated that into the continuous integration alsoâ€”see build.bat in your repository root directory.

To run gradle, you may do *one* of the following steps:

1. from the command line, run ./gradlew on unix-like system or gradlew.bat on Windows. You may continue to use your IDE for writing and running code/tests. The CI machine will run the gradle build file automatically. If you add dependencies to your project, remember to add those dependencies to the build.gradle file.

2. Integrate your IDE to use gradle. For this you will have to setup the project as a gradle project if you like to go this route, you may Google for steps that are specific to the IDE you're using.

Please make sure that the build passes (all tests pass) upon each commit. If a build fails, please fix the build right away. Either make change to fix the build or roll back the code change to fix the build (and then try again once you figure out what's going on).
                                            
------------------------------------------------------------------------------
