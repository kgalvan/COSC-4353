Assign3: Due 11:59PM March 30

The Fibonacci series of numbers start with 1, 1, 2, 3, 5, 8, 13, 21, ...
where values at position 0 and 1 are 1, and values at each position after
that are a sum of values at the previous two positions.

Write three implementations of a function to compute the Fibonacci number at a given position.

Please start with one implementation at a time rather than rushing through all
of them at the same time.

The three implementations are described below:

1. A simple iteration. 
  Given a position n, loop through totaling values until you reach the value for the given position.

2. A simple recursion.
  Given a position, compute the value at a position using the expression fib(n-1) + fib(n-2).

3. A memoized recursion.
  Given a position, look up to see if the value has been precomputed and if so return that value. Otherwise, use recursion to compute the value.
  
Confirms that the memoized version is faster than the recursive version.

Reuse as much code as possible.

Please bring forward the practices, techniques, and tools you have learned so far.

Please bring forward the practices, techniques, and tools you have learned so far. This includes: 
Good code quality
Lightweight design
Minimum code
Automated testing                                                         
Code coverage
Continuous integration

Total [100]: 100
Code compiles [10]:
All tests pass [10]:
Test to verify memoized solution is faster [10]:
Iterative solution and tests [20]:
Recursive solution and tests [20]:
Memoized solution and tests [20]:
Design and code quality [10]:
