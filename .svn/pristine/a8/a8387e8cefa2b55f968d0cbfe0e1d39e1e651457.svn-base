package guessinggame;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Matchers.anyString;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class GuessingGameTest {
    GuessingGame guessingGame;

   @BeforeEach
    void init(){
       guessingGame = new GuessingGame(new SpellCheckerService());

       
       SpellChecker spellChecker = mock(SpellChecker.class);
       when(spellChecker.isSpellingCorrect(anyString())).thenReturn(true);
       guessingGame = new GuessingGame(spellChecker);
    }

    @Test
    void Canary() {
        assertTrue(true);
    }

    @Test
    void scoreIsZero() {
        assertEquals(0, guessingGame.score("oekmny", ""));
    }

    @Test
    void scoreIsTwoMConsonant() {
        assertEquals(2, guessingGame.score("oekmny", "m"));
    }

    @Test
    void scoreIsOneOVowel() {
        assertEquals(1, guessingGame.score("oekmny", "o"));
    }

    @Test
    void scoreIsThreeOneConsonantOneVowel() {
        assertEquals(3, guessingGame.score("oekmny", "mo"));
    }

    @Test
    void scoreIsZeroLetterNotInScrambledWord() {
        assertEquals(0, guessingGame.score("oekmny", "a"));
    }

    @Test
    void scoreIsThreeMeInput() {
        assertEquals(3, guessingGame.score("oekmny", "Me"));
    }

    @Test
    void scoreIsFiveMatInput() {
        assertEquals(0, guessingGame.score("oekmny", "mat"));
    }

    @Test
    void scoreIsZeroMoonInput() {
        assertEquals(0, guessingGame.score("oekmny", "moon"));
    }

    @Test
    void spellingIsIncorrect() {
        SpellChecker spellChecker = mock(SpellChecker.class);
        when(spellChecker.isSpellingCorrect("whatever")).thenReturn(false);
        guessingGame = new GuessingGame(spellChecker);

        assertEquals(0, guessingGame.score("whatever", "whatever"));
    }

    @Test
    void networkFailure() {
        SpellChecker spellChecker = mock(SpellChecker.class);
        String message = "network failure";
        when(spellChecker.isSpellingCorrect("whatever")).thenThrow(new RuntimeException(message));
        guessingGame = new GuessingGame(spellChecker);

        assertThrows(RuntimeException.class, () ->{guessingGame.score("whatever", "whatever");}, message);
    }

    @Test
    void scrambleWordDoesNotEqualWord() throws IOException{
       List<String> listOfWords = new ArrayList<>();
       Random rand = new Random();
       String selectedWord;
       String scrambledWord;
       selectedWord = guessingGame.pickAWord(listOfWords, rand.nextInt());
       scrambledWord = guessingGame.scramble(selectedWord, rand.nextInt());

       assertNotEquals(selectedWord, scrambledWord);
    }
}


