package fibonacci;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertAll;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
                                             
//Venkat: No need for <T extends FibonacciSolutionTest> unnecessary complexity and does not give any benefits
public abstract class FibonacciSolutionTest<T extends FibonacciSolution> {
    private T fibonacciSolution; //Venkat: private FibonacciSolution fibonacciSolution;

    protected abstract T createInstance(); //Venkat: protected FibonacciSolution createInstance();

    @BeforeEach
    public void setUp() {
        fibonacciSolution = createInstance();
    } //Venkat: a blank line after this line, please
    @Test
    void canaryTest() {
        assertTrue(true);
    }

    @Test
    void fibMultipleNumbers() {
        assertAll(        //Venkat: Let's not use any strings in these tests.
                () -> assertEquals("1", String.valueOf(fibonacciSolution.compute(0))),
                () -> assertEquals("1", String.valueOf(fibonacciSolution.compute(1))),
                () -> assertEquals("2", String.valueOf(fibonacciSolution.compute(2))),
                () -> assertEquals("3", String.valueOf(fibonacciSolution.compute(3))),
                () -> assertEquals("5", String.valueOf(fibonacciSolution.compute(4))),
                () -> assertEquals("8", String.valueOf(fibonacciSolution.compute(5))),
                () -> assertEquals("34", String.valueOf(fibonacciSolution.compute(8))),
                () -> assertEquals("89", String.valueOf(fibonacciSolution.compute(10)))
        );
    }


}
