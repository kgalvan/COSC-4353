package guessinggame;

import org.junit.jupiter.api.Test;
import java.io.IOException; //Venkat: Please remove
import static org.junit.jupiter.api.Assertions.*;

public class GuessingGameTest{
    GuessingGame guessingGame = new GuessingGame(); //Venkat: Please remove new GuessingGame()
                                                                                              
//Venkat: write @BeforeEach and do new GuessingGame in that method
    @Test
    void Canary(){
        assertTrue(true);
    }

    @Test
    void scoreIsZero(){
        assertEquals(0, guessingGame.score("oekmny", ""));
    }

    @Test
    void scoreIsTwoMConsonant() {
        assertEquals(2, guessingGame.score("oekmny", "m"));
    }

    @Test
    void scoreIsOneOVowel() {
        assertEquals(1, guessingGame.score("oekmny", "o"));
    }

    @Test
    void scoreIsOneConsonant() {  //Venkat: is this the same as two tests above? If so, please remove this one
        assertEquals(2, guessingGame.score("oekmny", "n"));
    }
    
    @Test
    void scoreIsOneVowel() { //Venkat: is this the same as two tests above? If so, please remove this
        assertEquals(1, guessingGame.score("oekmny", "e"));
    }
    
    @Test
    void scoreIsTwoTwoConsonants() {
        assertEquals(4, guessingGame.score("oekmny", "mn"));
    }
    
    @Test
    void scoreIsTwoTwoVowels() {
        assertEquals(2, guessingGame.score("oekmny", "oe"));
    }
    @Test
    void scoreIsThreeOneConsonantOneVowel() {
        assertEquals(3, guessingGame.score("oekmny", "mo"));
    }
    @Test
    void scoreIsZeroLetterNotInScrambledWord() {
        assertEquals(0, guessingGame.score("oekmny", "a"));
    }
    @Test
    void scoreIsZeroIVowel() { //Venkat: we do not need test for each vowel, please remove
        assertEquals(0, guessingGame.score("oekmny", "i"));
    }
    @Test
    void scoreIsOneDifferentWordAInput(){
        assertEquals(1, guessingGame.score("biat", "a"));
    }
    @Test
    void scoreIsTwoDifferentWordAIInput(){
        assertEquals(2, guessingGame.score("biat", "ai"));
    }
    @Test
    void scoreIsFourDifferentWordPueInput(){
        assertEquals(4, guessingGame.score("ppure", "pue"));
    }
    @Test
    void scoreIsThreeMeInput() {
        assertEquals(3, guessingGame.score("oekmny", "Me"));
    }

    @Test
    void scoreIsFiveMatInput() {
        assertEquals(0, guessingGame.score("oekmny", "mat"));
    }
    @Test
    void scoreIsZeroMoonInput() {
        assertEquals(0, guessingGame.score("oekmny", "moon"));
    }                    
    
    //Venkat: test for score where the guess word is correct in spelling.
    //test for score where the guess word is incorrect spelling.
    //For this, create an interface called SpellChecker with isSpellingCorrect method
    //In the BeforeEach method create a stub, using Mockito, and let the isSpellingCorrect return true
    //Pass the stub to the constructor of GuessingGame.
    
    //In the test for score for wrong spelling
    //create a stub for SpellChecker where isSpellingCorrect returns false
    //pass the stub to the constructor of GuessingGame in this test
    //call score 
    //assert resuilt is 0
    
    //Then write a test for network failure
    //create a stub for SpellChecker where isSpellingCorrect throws an exception new RuntimeException("Network failure")
    //pass the stub to the constructor of GuessingGame in this test
    //call score, like assertThrows(RuntimeException.class, () -> guessingGame.scores..., "Network failure");

//Venkat: Please remove the following
    @Test
    void spellCheckMonkeyisTrue(){
        try{
            assertEquals(true, guessingGame.spellCheck("monkey"));
        }
        catch(IOException ex){
        }
    }
    @Test
    void spellCheckMonkisTrue(){
        try{
            assertEquals(true, guessingGame.spellCheck("monk"));
        }
        catch(IOException ex){
        }
    }
    @Test
    void spellCheckOekmnyisFalse(){
        try{
            assertEquals(false, guessingGame.spellCheck("oekmny"));
        }
        catch(IOException ex){
        }
    }
}
