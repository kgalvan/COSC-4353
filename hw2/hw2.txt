HW2: Due 11:59PM February 9

In this homework we'll create an initial strategic design for a version of the Master Mind game.

Let's first discuss the version of the game that we'll design. We'll not be writing any code in this homework, but only create an initial strategic design.

The object of the game is for the user to guess the colors the program has
chosen. The program chooses six distinct colors from among ten colors. The user obviously does not know the colors the program has chosen.

The operations user can perform and the outcome:

User picks six colors:
The program displays a color code back to indicate the progress the user has made. 

If the user guessed the exact color combination, including the positions, the result is six black colors. The game ends now with a message that the user has won and the program reveals the color selected.

If the user guessed only some colors, then the result has as many black colors as the number of direct positions matches and as many silver colors for each match that is in an incorrect position.

For example, if the program selected green, red, blue, white, orange, purple, and the user entered cyan, yellow, blue, orange, violet, red, then the program will display black, silver, silver.

User gives up: 
The program displays the colors selected, game ends with a message the user has lost.

User has made 20 tries:
The program displays the colors selected, game ends with a message the user has lost (unless in the last try the user found the combination).

1. How would you design this program? 

	Our approach to this problem would be to allow a user to use a GUI to choose 6 colors to compare with a random one generated by the program. We need to have similar data structures for the guess and solution, string arrays of size 6, for ease of comparison. We would have to have checks for the number of attempts left and whether or not the user has given up. We also have methods that compare the user's entry with the solution, as well as methods that would count and return a number of black/silver colors to the user. A win/lose message would also be implemented. Implemented in the GUI are the method of input and the output. Using Swing, we add boxes(buttons) that allow for user entry, as well as program output of colors. We also implement buttons that function as a submit button or a forfeit button.

	First, the game must pick 6 colors from a list of 10 and keep track of their order. To do this we would have a game class with a string array to hold all of those colors, called solution. The colors would be chosen from a random number generator that will pick numbers from 1 to 10 and each number will be associated with a color.

	Next, the player must choose 6 colors in the correct order to win. We would have 6 textbox objects, called userColorBoxes on the main screen to take the users input. The colors will be stored in the order from left to right in an array called userGuess that the user entered. Then the user must click a submit button to store this into another array of strings.

	The user has 20 attempts to get this correct. So the game class will also keep track of the attempts with an int called attempts with an initial value of 20. Each time an attempt is used, the number will reduce by 1 and will always be displayed on the top right corner. When this value hits 0, a message saying the user lost will be displayed above the text boxes and the rectangle Shapes surrounding the textboxes will have their background colors set to the correct color.

	At any time, the user can click the Forfeit button at the bottom to the left of the submit button. If pressed, a message stating that the user lost will be displayed and the rectangle Shapes surrounding each textbox will have their background colors set to the correct color.

	The program will have a method to compare the userGuess with the solution. The function will have a nested for loop going to 6 iterations. If a color match is found, the location in the list will be compared. If the iteration is also a match then a rectangle Shape called solutionColorBoxes surrounding that positions textbox in the GUI will turn black. If the iteration is not a match, it will turn silver instead. All others will remain transparent and match the background color of the window.

	If the user gets all the colors correct, a message will be displayed saying that the user won. The solutionColorBoxes will appear black and the Forfeit button will convert to a Retry button.


2. Discuss what language you would use, how you'd structure the program, what libraries you'd use? What library do you plan to use to create the GUI?

	Since we both have the most shared experience with Java we decided to program the game in the Java language. Any basic libraries to keep track of arrays, strings, and colors will be used. We decided to use the Swing library to create the GUI for the window, shape objects, colors, and buttons.

3. Include a separate file (may be a scan of hand drawn picture if you like, or a pdf, tiff, word document, etc.) which shows a UML diagram of your design.


Total [10]: -2

Need to show cardinality and also aggregation where present. It does not make such sense for Button to inherit from User class. Need to rethink about this.


The hw2 score has been updated at
http://www2.cs.uh.edu/~svenkat/spring2018sd/scores.pdf.
Please hit refresh on your browser to view the latest version instead of a cached version.

